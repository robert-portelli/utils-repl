# .github/actions/github-rest-api/action.yml
---
name: "github-rest-api"
description: "Call the GitHub REST API using curl with customizable method, endpoint,
  and JSON body"
inputs:
  endpoint:
    description: "API endpoint path (e.g. /repos/owner/repo/rulesets)"
    required: true
    type: string
  method:
    description: "HTTP method (GET, POST, PUT, DELETE)"
    required: false
    type: string
  json_body:
    description: "JSON string for the request body"
    required: false
    default: "{}"
    type: string
  token:
    description: "GitHub token used for authentication"
    required: true
    type: string
  extract:
    description: "Optional jq expression to extract a value from the response"
    required: false
    type: string
  expected:
    description: "Optional expected value to poll for"
    required: false
    type: string
  retries:
    description: "Number of retry attempts (if expected is set)"
    required: false
    default: 10
    type: number
  delay:
    description: "Delay in seconds between retries"
    required: false
    default: 3
    type: number
outputs:
  result:
    description: "The extracted value, if extract was used"
    value: ${{ steps.extract.outputs.result }}
  response:
    description: "The raw API response as a string"
    value: ${{ steps.request.outputs.response }}
  raw_json:
    description: "The raw JSON response with no wrapping"
    value: ${{ steps.request.outputs.raw_json }}
  status:
    description: "The HTTP status code returned by the request"
    value: ${{ steps.request.outputs.status }}
runs:
  using: "composite"
  steps:
    - name: Make GitHub REST API request
      id: request
      shell: bash
      run: |-
        TOKEN="${{ inputs.token }}"
        if [ -z "$TOKEN" ]; then
          echo "‚ùå No token provided"
          exit 1
        fi

        for attempt in $(seq 1 "${{ inputs.retries }}"); do
          echo "üåê Request #$attempt: ${{ inputs.method }} https://api.github.com${{ inputs.endpoint }}"

          HTTP_RESPONSE=$(mktemp)
          HTTP_STATUS=$(curl -s -w "%{http_code}" -o "$HTTP_RESPONSE" \
            --request "${{ inputs.method }}" \
            --url "https://api.github.com${{ inputs.endpoint }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d '${{ inputs.json_body }}')

          cat "$HTTP_RESPONSE" > response.json
          echo "status=$HTTP_STATUS" >> "$GITHUB_OUTPUT"

          if [[ "$HTTP_STATUS" -ge 400 ]]; then
            echo "‚ùå Request failed with status $HTTP_STATUS"
            echo "üîé Response:"
            cat response.json
            exit 1
          fi

          if [[ -n "${{ inputs.expected }}" ]]; then
            VALUE=$(jq -r "${{ inputs.extract }}" response.json || echo "")
            echo "üîç Extracted value: $VALUE"

            if [[ "$VALUE" == "${{ inputs.expected }}" ]]; then
              echo "‚úÖ Success: match found."
              break
            fi

            if [[ "$attempt" -lt "${{ inputs.retries }}" ]]; then
              echo "‚è≥ Waiting ${{ inputs.delay }} seconds before retry..."
              sleep "${{ inputs.delay }}"
            else
              echo "‚ùå Failed: expected value '${{ inputs.expected }}' not found after ${{ inputs.retries }} attempts."
              exit 1
            fi
          else
            break
          fi

        done

        echo 'response<<EOF' >> "$GITHUB_OUTPUT"
        cat response.json >> "$GITHUB_OUTPUT"
        echo 'EOF' >> "$GITHUB_OUTPUT"
    - id: extract
      name: Extract result from response
      if: ${{ inputs.extract != '' }}
      shell: bash
      run: |-
        RESULT=$(jq -r "${{ inputs.extract }}" response.json)
        echo 'result<<EOF' >> "$GITHUB_OUTPUT"
        echo "$RESULT" >> "$GITHUB_OUTPUT"
        echo 'EOF' >> "$GITHUB_OUTPUT"
