---
name: "load-json"
description: "Load a JSON file and emit it as a string"
inputs:
  path:
    description: "Path to the JSON file"
    type: string
    required: true
  smoke:
    description: "Whether or not to smoke the JSON file"
    type: boolean
    required: false
    default: false
  compact:
    description: "Output compacted JSON"
    type: boolean
    required: false
    default: false
outputs:
  json:
    description: "Stringified JSON content"
    value: ${{ steps.return.outputs.json }}
  ruleset_name:
    description: "Extracted value of .name from the JSON"
    value: ${{ steps.return.outputs.ruleset_name }}
  target_ref:
    description: "Extract value of .conditions.ref_name.include"
    value: ${{steps.return.outputs.target_ref }}
  compact_json:
    description: "Compacted JSON for submission to APIs"
    value: ${{ steps.compact.outputs.compact_json }}
runs:
  using: "composite"
  steps:
    - id: validate
      shell: bash
      run: |-
        jq empty < "${{ inputs.path }}" || {
          echo "❌ File is not valid JSON"
          exit 1
        }
    - id: load
      if: ${{ inputs.compact == 'false' && inputs.smoke == 'false' }}
      shell: bash
      run: |-
        _JSON=$(cat "${{ inputs.path }}")
        _NAME=$(echo "$_JSON" | jq -r '.name')
        _REF=$(echo "$_JSON" | jq -r '.conditions.ref_name.include[0]')

        {
          echo 'JSON<<EOF'
          echo "$_JSON"
          echo 'EOF'
          echo "RULESET_NAME=$_NAME"
          echo "REF=$_REF"
        } >> "$GITHUB_ENV"
    - id: smoke
      if: ${{ inputs.compact == 'false' && inputs.smoke == 'true' }}
      shell: bash
      run: |-
        _JSON=$(cat "${{ inputs.path }}")
        default_branch="${GITHUB_REF_NAME:-main}"
        {
          _modified_json="$(echo "$_JSON" | jq \
            --arg default_branch "$default_branch" \
            '.name |= "smoke-\(.)" |
             .conditions.ref_name.include |= map(
               if . == "~DEFAULT" then "refs/heads/smoke-\($default_branch)"
               elif . == "~ALL" then .
               elif startswith("refs/heads/") then "refs/heads/smoke-\(.[11:])"
               else .
               end
             )')"

          echo 'JSON<<EOF'
          echo "$_modified_json"
          echo 'EOF'
          echo "RULESET_NAME=$(echo "$_modified_json" | jq -r '.name')"
          echo "REF=$(echo "$_modified_json" | jq -r '.conditions.ref_name.include[0]')"
        } >> "$GITHUB_ENV"
    - id: return
      if: ${{ env.JSON != '' && env.RULESET_NAME != '' }}
      shell: bash
      run: |-
        {
          echo 'json<<EOF'
          echo "$JSON"
          echo 'EOF'
          echo "ruleset_name=$RULESET_NAME"
          echo "target_ref=$REF"
        } >> "$GITHUB_OUTPUT"
    - id: compact
      if: ${{ inputs.compact == 'true' }}
      shell: bash
      run: |-
        COMPACT=$(jq -c . < "${{ inputs.path }}")
        {
          echo 'compact_json<<EOF'
          echo "$COMPACT"
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"
